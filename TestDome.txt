***** PALINDROME

using System;
using System.Linq;

public class Palindrome
{
    public static bool IsPalindrome(string word)
    {
        var reversed = new string(word.ToLower().ToCharArray().Reverse().ToArray());
        if(word.ToLower().Equals(reversed))
            return true;
        return false;
    }

    public static void Main(string[] args)
    {
        Console.WriteLine(Palindrome.IsPalindrome("Deleveled"));
    }
}

***** BINARY SEARCH TREE

using System;

public class Node
{
    public int Value { get; set; }

    public Node Left { get; set; }

    public Node Right { get; set; }

    public Node(int value, Node left, Node right)
    {
        Value = value;
        Left = left;
        Right = right;
    }
}

public class BinarySearchTree
{
    public static bool Contains(Node root, int value)
    {
        if (root == null)
            return false;

        if (root.Value == value)
            return true;

        if(root.Value > value)
        {
            return Contains(root.Left, value);
        }
        else
        {
            return Contains(root.Right, value);
        }
    }

    public static void Main(string[] args)
    {
        Node n1 = new Node(1, null, null);
        Node n3 = new Node(3, null, null);
        Node n2 = new Node(2, n1, n3);

        Console.WriteLine(Contains(n2, 3));
    }
}

***** USER INPUT

using System;

public class TextInput
{
    protected string _value;

    public virtual void Add(char c)
    {
        _value += c;
    }

    public string GetValue()
    {
        return _value;
    }
}

public class NumericInput : TextInput
{
    public override void Add(char c)
    {
        int result = 0;
        if(Int32.TryParse(c.ToString(), out result))
        {
            _value += c;
        }
    }
}

public class UserInput
{
    public static void Main(string[] args)
    {
        TextInput input = new NumericInput();
        input.Add('1');
        input.Add('a');
        input.Add('0');
        Console.WriteLine(input.GetValue());
    }
}

***** Two Sum

using System;
using System.Collections.Generic;

class TwoSum
{
    public static Tuple<int, int> FindTwoSum(IList<int> list, int sum)
    {
        var d = new Dictionary<int, int>();
        int i;

        for (int idx = 0; idx < list.Count; idx++)
        {
            var value = list[idx];

            
            if (!d.TryGetValue(value, out i))
            {
                d.Add(value, idx);
            }
                
        }

        foreach( var key in d.Keys)
        {
            var value = sum - key;
            if (d.TryGetValue(value, out i))
            {
                var index2 = i;
                d.TryGetValue(key, out i);
                var index1 = i;

                return new Tuple<int, int>(index1, index2);
            }

        }


        return null;
    }

    public static void Main(string[] args)
    {
        Tuple<int, int> indices = FindTwoSum(new List<int>() { 1, 3, 5, 7, 9 }, 12);
        Console.WriteLine(indices.Item1 + " " + indices.Item2);
    }
}

 ***** Folders Xml
 
using System;
using System.Collections.Generic;
using System.Xml.Linq;
using System.Linq;

public class Folders
{
    public static IEnumerable<string> FolderNames(string xml, char startingLetter)
    {
        XDocument doc = XDocument.Parse(xml);
        var folders = doc.Descendants("folder");
        var f = folders.Where(x => ((string)x.Attribute("name")).ToCharArray()[0] == startingLetter).Select(x => (string)x.Attribute("name"));
        return f;
    }

    public static void Main(string[] args)
    {
        string xml =
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<folder name=\"c\">" +
                "<folder name=\"program files\">" +
                    "<folder name=\"uninstall information\" />" +
                "</folder>" +
                "<folder name=\"users\" />" +
            "</folder>";

        foreach (string name in Folders.FolderNames(xml, 'u'))
            Console.WriteLine(name);
    }
}

***** Sorted Search

using System;

public class SortedSearch
{
    public static int CountNumbers(int[] sortedArray, int lessThan)
    {
        int maxIdx = sortedArray.Length - 1;
        if (sortedArray.Length == 0)
            return 0;

        int minIdx = 0;
        



        while (true)
        {
            if(maxIdx-minIdx <= 1)
            {
                int maxValue = sortedArray[maxIdx];
                if (sortedArray[maxIdx] < lessThan)
                    return maxIdx+1;
                else
                {
                    int minValue = sortedArray[minIdx];
                    if (minValue < lessThan)
                    {
                        return minIdx + 1;
                    }
                    else
                    {
                        if (minIdx > 0)
                            return minIdx;
                        else
                        {
                            if(minIdx == 0)
                            {
                                return 0;
                            }
                        }

                    }                    
                }
                    
                return 0;
            }


            int midIdx = (maxIdx + minIdx) / 2;

            if (sortedArray[midIdx] >= lessThan)
            {
                maxIdx = midIdx;
            }
            else 
            {
                minIdx = midIdx+1;
            }


        }

        return minIdx;
    }

    public static void Main(string[] args)
    {

        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1 }, 0));
        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4  }, 5));
        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4, 5  }, 5));
        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4, 5, 9 }, 6));

        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4, 5, 6, 6, 7, 9, 10 }, 6));
        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4, 5, 6, 6, 7, 9, 10 }, 7));
        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4, 5, 6, 6, 7, 9, 10 }, 8));
        Console.WriteLine(SortedSearch.CountNumbers(new int[] { 1, 4, 5, 6, 6, 7, 9, 10 }, 9));
        Console.ReadLine();
    }
}

***** SQL Average

-- Write only the SQL statement that solves the problem and nothing else.(

SELECT userId, Avg(duration) 
FROM sessions 
GROUP BY userId
HAVING count(userId) > 1



****** Trains


using System;

public class TrainComposition
{
    public class Carriage
    {
        public Carriage(int v)
        {
            value = v;
        }
        public int value;

        public Carriage next;
        public Carriage prev;
    }

    Carriage engine = null;
    Carriage tail = null;

    public void AttachWagonFromLeft(int wagonId)
    {
        Carriage c = new Carriage(wagonId);

        if(engine == null)
        {
            engine = c;
            tail = c;
            return;
        }


        c.next = engine;
        engine.prev = c;
        engine = c;

    }

    public void AttachWagonFromRight(int wagonId)
    {
        Carriage c = new Carriage(wagonId);

        if (engine == null)
        {
            engine = c;
            tail = c;
            return;
        }

        Carriage p = tail;

        tail.next = c;
        tail = c;
        tail.prev = p;
    }

    public int DetachWagonFromLeft()
    {
        int result = engine.value;

        if(engine == tail )
        {
            engine = null;
            tail = null;
        }
        else
        {
            engine = engine.next;
            engine.prev = null;
        }

        return result;
    }

    public int DetachWagonFromRight()
    {
        if (tail == null)
            return 0;

        int result = tail.value;

        if (engine == tail)
        {
            engine = null;
            tail = null;
        }
        else
        {
            tail = tail.prev;
            tail.next = null;
        }

        return result;
    }

    public static void Main(string[] args)
    {
        TrainComposition tree = new TrainComposition();
        tree.AttachWagonFromLeft(7);
        tree.AttachWagonFromLeft(13);
        Console.WriteLine(tree.DetachWagonFromRight()); // 7 
        Console.WriteLine(tree.DetachWagonFromLeft()); // 13
        Console.ReadLine();
    }
}

***** Path

using System;
using System.Collections.Generic;
public class Path
{
    public string CurrentPath { get; private set; }

    public Path(string path)
    {
        this.CurrentPath = path;
    }

    public void Cd(string newPath)
    {
        var commands = newPath.Split('/');

        var path = this.CurrentPath.Split('/');

        Stack<string> s = new Stack<string>();
        foreach(var c in path)
        {
            if(c != "")
                s.Push(c);
        }

        foreach(var c in commands)
        {
            if( c == "..")
            {
                s.Pop();
            }
            else
            {
                s.Push(c);
            }
        }

        string np = "";
        while (s.Count > 0)
        {
            var c = s.Pop();
            np = "/" + c + np;
        }

        if (np == "") np = "/";
        this.CurrentPath = np;
    }

    public static void Main(string[] args)
    {
        Path path = new Path("/a/b/c/d");
        path.Cd("../x");
        Console.WriteLine(path.CurrentPath);
        Console.ReadKey();
    }
}
